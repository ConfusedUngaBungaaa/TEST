from artificial_intelligence import ArtificialIntelligence
# Two playes : X and O


class TicTacToe4x4:
    winning_combos = (
        # Lines
        {0, 1, 2}, {1, 2, 3},
        {4, 5, 6}, {5, 6, 7},
        {8, 9, 10}, {9, 10, 11},
        {12, 13, 14}, {13, 14, 15},

        # Columns
        {0, 4, 8}, {4, 8, 12},
        {1, 5, 9}, {5, 9, 13},
        {2, 6, 10}, {6, 10, 14},
        {3, 7, 11}, {7, 11, 15},

        # Diago
        {0, 5, 10}, {5, 10, 15},
        {3, 6, 9}, {6, 9, 12},
        {1, 6, 11}, {4, 9, 14},
        {2, 5, 8}, {7, 10, 13})

    winners = ('X win', 'Draw', 'O win')

    def __init__(self, square=[]):
        if len(square) == 0:
            self.square = [None for i in range(16)]
        else:
            self.square = square
        self.X_set = set()
        self.O_set = set()

    def show(self):
        for i in range(0, 16, 4):
            line = ""
            for case in self.square[i:i+4]:
                if case == "X":
                    line += "X "
                elif case == "O":
                    line += "O "
                else:
                    line += ". "
            print(line)

    def available_moves(self):
        available_moves_list = []
        for k, case in enumerate(self.square):
            if case is None:
                available_moves_list.append(k)
        return available_moves_list

    def make_move(self, move, player):
        if move in self.available_moves():
            self.square[move] = player
            if player == "X":
                self.X_set.add(move)
            else:
                self.O_set.add(move)
            return True
        else:
            return False

    def complete(self):
        if None in self.square:
            return False
        else:
            return True

    def has_winner(self):
        for combo in self.winning_combos:
            if combo.issubset(self.X_set) or combo.issubset(self.O_set):
                return True
        return False

    def find_winner(self):
        for combo in self.winning_combos:
            if combo.issubset(self.X_set):
                return self.winners[0]
            elif combo.issubset(self.O_set):
                return self.winners[2]
        return self.winners[1]

    def heuristic(self, player):
        X_score = 24
        O_score = 24
        for winning_combo in self.winning_combos:
            if self.X_set.intersection(winning_combo):
                O_score -= 1
            if self.O_set.intersection(winning_combo):
                X_score -= 1
        if player == "X":
            return X_score - O_score
        else:
            return O_score - X_score

if __name__ == "__main__":
    tic_tac_toe = TicTacToe4x4()
    player_one = "X"
    ai_player = ArtificialIntelligence(algorithm_chosen="alphabeta_heuristic",
                                       depth=5)
    # player_two = "O"
    tic_tac_toe.show()
    while not tic_tac_toe.complete():
        # Player one move
        try:
            player_one_move = int(input("Choose a move (0-15) : "))
        except ValueError:
            print("Wrong value, try again")
            continue
        is_move_made = tic_tac_toe.make_move(player_one_move, player_one)
        if is_move_made:
            pass
        else:
            print("This case is not in range or already chosen, try again")
            continue
        tic_tac_toe.show()
        if tic_tac_toe.complete() or tic_tac_toe.has_winner():
            break

        # Player two move
        ai_move = ai_player.choose_move(tic_tac_toe)
        tic_tac_toe.make_move(ai_move, "O")
        # available_moves = tic_tac_toe.available_moves()
        # player_two_move = random.choice(available_moves)
        # tic_tac_toe.make_move(player_two_move, player_two)
        print("Computer plays")
        tic_tac_toe.show()
        if tic_tac_toe.complete() or tic_tac_toe.has_winner():
            break
    print(tic_tac_toe.find_winner())
    print("Artificial intelligence has thought during : ",
          ai_player.thinking_time, " seconds")

from artificial_intelligence import MinimaxArtificialIntelligence
from artificial_intelligence import AlphaBetaArtificialIntelligence
import time
# Two playes : X and O
# http://cwoebker.com/posts/tic-tac-toe


class TicTacToe3x3:
    winning_combos = (
        {0, 1, 2}, {3, 4, 5}, {6, 7, 8},
        {0, 3, 6}, {1, 4, 7}, {2, 5, 8},
        {0, 4, 8}, {2, 4, 6})

    winners = ('X win', 'Draw', 'O win')

    def __init__(self, square=[]):
        if len(square) == 0:
            self.square = [None for i in range(9)]
        else:
            self.square = square
        self.X_set = set()
        self.O_set = set()

    def show(self):
        for i in range(0, 9, 3):
            line = ""
            for case in self.square[i:i+3]:
                if case == "X":
                    line += "X "
                elif case == "O":
                    line += "O "
                else:
                    line += ". "
            print(line)

    def available_moves(self):
        available_moves_list = []
        for k, case in enumerate(self.square):
            if case is None:
                available_moves_list.append(k)
        return available_moves_list

    def make_move(self, move, player):
        if move in self.available_moves():
            self.square[move] = player
            if player == "X":
                self.X_set.add(move)
            else:
                self.O_set.add(move)
            return True
        else:
            return False

    def complete(self):
        if None in self.square:
            return False
        else:
            return True

    def has_winner(self):
        for combo in self.winning_combos:
            if combo.issubset(self.X_set) or combo.issubset(self.O_set):
                return True
        return False

    def find_winner(self):
        for combo in self.winning_combos:
            if combo.issubset(self.X_set):
                return self.winners[0]
            elif combo.issubset(self.O_set):
                return self.winners[2]
        return self.winners[1]

    def heuristic(self, player):
        X_score = 8
        O_score = 8
        for winning_combo in self.winning_combos:
            if self.X_set.intersection(winning_combo):
                O_score -= 1
            if self.O_set.intersection(winning_combo):
                X_score -= 1
        if player == "X":
            return X_score - O_score
        else:
            return O_score - X_score


if __name__ == "__main__":
    tic_tac_toe = TicTacToe3x3()
    player_one = "X"
    ai_player = AlphaBetaArtificialIntelligence()
    # player_two = "O"
    tic_tac_toe.show()
    human_time_reflexion = 0
    while not tic_tac_toe.complete():
        # Player one move
        start_time = time.time()
        try:
            player_one_move = int(input("Choose a move (0-8) : "))
        except ValueError:
            print("Wrong value, try again")
            continue
        is_move_made = tic_tac_toe.make_move(player_one_move, player_one)
        if is_move_made:
            pass
        else:
            print("This case is not in range or already chosen, try again")
            continue
        tic_tac_toe.show()
        human_time_reflexion = time.time() - start_time
        if tic_tac_toe.complete() or tic_tac_toe.has_winner():
            break

        # Player two move
        ai_move = ai_player.choose_move(tic_tac_toe)
        tic_tac_toe.make_move(ai_move, "O")
        # available_moves = tic_tac_toe.available_moves()
        # player_two_move = random.choice(available_moves)
        # tic_tac_toe.make_move(player_two_move, player_two)
        print("Computer plays")
        tic_tac_toe.show()
        if tic_tac_toe.complete() or tic_tac_toe.has_winner():
            break
    print(tic_tac_toe.find_winner())
    print("Artificial intelligence has thought during : ",
          ai_player.thinking_time, " seconds")
    print("You has thought during : ",
          human_time_reflexion, " seconds")
    '''tic_tac_toe = TicTacToe3x3(["X", None, None, None,
    None, None, None, None, None])
    tic_tac_toe.X_set = {0}
    #tic_tac_toe.O_set = {}
    tic_tac_toe.show()
    ai_player = ArtificialIntelligence()
    ai_move = ai_player.choose_move(tic_tac_toe)
    tic_tac_toe.make_move(ai_move, "O")
    tic_tac_toe.show()'''

import unittest
from tic_tac_toe_3x3 import TicTacToe3x3
from artificial_intelligence import MinimaxArtificialIntelligence
from artificial_intelligence import AlphaBetaArtificialIntelligence
from artificial_intelligence import MinimaxHeuristicArtificialIntelligence
from artificial_intelligence import AlphaBetaHeuristicArtificialIntelligence


class TicTacToe3x3Tests(unittest.TestCase):

    def test_tic_tac_toe_creation(self):
        tic_tac_toe = TicTacToe3x3()
        self.assertEqual(tic_tac_toe.square, [None for i in range(9)])

    def test_tic_tac_toe_available_moves(self):
        tic_tac_toe = TicTacToe3x3()
        self.assertEqual(tic_tac_toe.available_moves(), [i for i in range(9)])

    def test_tic_tac_toe_available_moves_in_game(self):
        tic_tac_toe = TicTacToe3x3(["X", None, None, None, None,
                                    "O", None, None, None])
        self.assertEqual(tic_tac_toe.available_moves(), [1, 2, 3, 4, 6, 7, 8])

    def test_tic_tac_toe_make_move(self):
        tic_tac_toe = TicTacToe3x3()
        self.assertEqual(tic_tac_toe.make_move(0, "X"), True)
        self.assertEqual(tic_tac_toe.square, ["X", None, None, None, None,
                                              None, None, None, None])

    def test_tic_tac_toe_make_move_in_game(self):
        tic_tac_toe = TicTacToe3x3(["X", None, None, None, None,
                                    "O", None, None, None])
        self.assertEqual(tic_tac_toe.make_move(1, "X"), True)
        self.assertEqual(tic_tac_toe.square, ["X", "X", None, None, None,
                                              "O", None, None, None])

    def test_tic_tac_toe_make_move_alredy_occupied(self):
        tic_tac_toe = TicTacToe3x3(["X", None, None, None, None,
                                    "O", None, None, None])
        self.assertEqual(tic_tac_toe.make_move(0, "O"), False)
        self.assertEqual(tic_tac_toe.square, ["X", None, None, None, None,
                                              "O", None, None, None])

    def test_tic_tac_toe_complete(self):
        tic_tac_toe = TicTacToe3x3(["X", "X", "X", "X", "X",
                                    "O", "X", "X", "X"])
        self.assertEqual(tic_tac_toe.complete(), True)

    def test_tic_tac_toe_not_complete(self):
        tic_tac_toe = TicTacToe3x3(["X", None, None, None, None,
                                    "O", None, None, None])
        self.assertEqual(tic_tac_toe.complete(), False)

    def test_tic_tac_toe_has_winner(self):
        tic_tac_toe = TicTacToe3x3(["X", "X", "X", "X", "X",
                                    "O", "X", "X", "X"])
        tic_tac_toe.X_set = {0, 1, 2, 3, 4, 6, 7, 8}
        tic_tac_toe.O_set = {5}
        self.assertEqual(tic_tac_toe.has_winner(), True)

    def test_tic_tac_toe_not_has_winner(self):
        tic_tac_toe = TicTacToe3x3()
        self.assertEqual(tic_tac_toe.has_winner(), False)

    def test_tic_tac_toe_find_winner(self):
        tic_tac_toe = TicTacToe3x3(["X", "X", "X", "X", "X",
                                    "O", "X", "X", "X"])
        tic_tac_toe.X_set = {0, 1, 2, 3, 4, 6, 7, 8}
        tic_tac_toe.O_set = {5}
        self.assertEqual(tic_tac_toe.find_winner(), "X win")

    def test_tic_tac_toe_find_winner_o_win(self):
        tic_tac_toe = TicTacToe3x3(["X", "O", "X", "O", "O",
                                    "O", "X", "O", "X"])
        tic_tac_toe.X_set = {0, 2, 6, 8}
        tic_tac_toe.O_set = {1, 3, 4, 5, 7}
        self.assertEqual(tic_tac_toe.find_winner(), "O win")

    def test_tic_tac_toe_find_winner_draw(self):
        tic_tac_toe = TicTacToe3x3(["X", "X", "O", "O", "O",
                                    "X", "X", "X", "O"])
        tic_tac_toe.X_set = {0, 1, 5, 6, 7}
        tic_tac_toe.O_set = {2, 3, 4, 8}
        self.assertEqual(tic_tac_toe.find_winner(), "Draw")

    def test_heuristic_beginning(self):
        tic_tac_toe = TicTacToe3x3()
        self.assertEqual(tic_tac_toe.heuristic('O'), 0)

    def test_tic_tac_toe_heuristic(self):
        tic_tac_toe = TicTacToe3x3(["X", "O", None, "O", None,
                                    None, "X", "O", "X"])
        tic_tac_toe.X_set = {0, 6, 8}
        tic_tac_toe.O_set = {1, 3, 7}
        self.assertEqual(tic_tac_toe.heuristic('O'), -1)


class ArtificialIntelligenceTicTacToe3x3Tests(unittest.TestCase):

    def test_minimax_artificial_intelligence_creation(self):
        minimax_artificial_intelligence = MinimaxArtificialIntelligence()
        self.assertEqual(minimax_artificial_intelligence.symbol, "O")

    def test_alphabeta_artificial_intelligence_creation(self):
        alphabeta_artificial_intelligence = AlphaBetaArtificialIntelligence()
        self.assertEqual(alphabeta_artificial_intelligence.symbol, "O")

    def test_minimax_heuristic_artificial_intelligence_creation(self):
        minimax_heuristic_artificial_intelligence = \
            MinimaxHeuristicArtificialIntelligence()
        self.assertEqual(minimax_heuristic_artificial_intelligence.symbol, "O")
        self.assertEqual(minimax_heuristic_artificial_intelligence.depth, 5)

    def test_alphabeta_heuristic_artificial_intelligence_creation(self):
        alphabeta_heuristic_artificial_intelligence = \
            AlphaBetaHeuristicArtificialIntelligence()
        self.assertEqual(alphabeta_heuristic_artificial_intelligence.symbol,
                         "O")
        self.assertEqual(alphabeta_heuristic_artificial_intelligence.depth, 5)

    def test_minimax_against_minimax(self):
        result_list = []
        for i in range(5):
            first_ai_player = MinimaxArtificialIntelligence()
            second_ai_player = MinimaxArtificialIntelligence(symbol="X")
            tic_tac_toe = TicTacToe3x3()

            while not tic_tac_toe.complete():
                # AI one
                first_ai_move = first_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(first_ai_move,
                                      first_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break

                # AI two
                second_ai_move = second_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(second_ai_move,
                                      second_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break
            result_list.append(tic_tac_toe.find_winner())
        self.assertEqual(result_list, ["Draw" for i in range(5)])

    def test_alphabeta_against_alphabeta(self):
        result_list = []
        for i in range(5):
            first_ai_player = AlphaBetaArtificialIntelligence()
            second_ai_player = AlphaBetaArtificialIntelligence(symbol="X")
            tic_tac_toe = TicTacToe3x3()

            while not tic_tac_toe.complete():
                # AI one
                first_ai_move = first_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(first_ai_move,
                                      first_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break

                # AI two
                second_ai_move = second_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(second_ai_move,
                                      second_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break
            result_list.append(tic_tac_toe.find_winner())
        self.assertEqual(result_list, ["Draw" for i in range(5)])

    def test_minimax_heuristic_against_alphabeta(self):
        result_list = []
        for i in range(5):
            first_ai_player = MinimaxArtificialIntelligence()
            second_ai_player = AlphaBetaArtificialIntelligence(symbol="X")
            tic_tac_toe = TicTacToe3x3()

            while not tic_tac_toe.complete():
                # AI one
                first_ai_move = first_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(first_ai_move,
                                      first_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break

                # AI two
                second_ai_move = second_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(second_ai_move,
                                      second_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break
            result_list.append(tic_tac_toe.find_winner())
        self.assertEqual(result_list, ["Draw" for i in range(5)])

    def test_alphabeta_heuristic_against_alphabeta(self):
        result_list = []
        for i in range(5):
            first_ai_player = \
                AlphaBetaHeuristicArtificialIntelligence(symbol="O")
            second_ai_player = AlphaBetaArtificialIntelligence(symbol="X")
            tic_tac_toe = TicTacToe3x3()

            while not tic_tac_toe.complete():
                # AI one
                first_ai_move = first_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(first_ai_move,
                                      first_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break

                # AI two
                second_ai_move = second_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(second_ai_move,
                                      second_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break
            result_list.append(tic_tac_toe.find_winner())
        self.assertEqual(result_list, ["Draw" for i in range(5)])

    def test_minimax_against_human_strategy(self):
        result_list = []
        for i in range(30):
            first_ai_player = MinimaxArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, "O", None, None,
                                        None, "X"])
            tic_tac_toe.X_set = {0, 8}
            tic_tac_toe.O_set = {4}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertNotIn(2, result_list)
        self.assertNotIn(6, result_list)
        result_list = []
        for i in range(30):
            first_ai_player = MinimaxArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, None, None,
                                        None, None, None])
            tic_tac_toe.X_set = {0}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertEqual([4 for i in range(30)], result_list)

    def test_alphabeta_against_human_strategy(self):
        result_list = []
        for i in range(40):
            first_ai_player = AlphaBetaArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, "O", None, None,
                                        None, "X"])
            tic_tac_toe.X_set = {0, 8}
            tic_tac_toe.O_set = {4}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertNotIn(2, result_list)
        self.assertNotIn(6, result_list)
        result_list = []
        for i in range(40):
            first_ai_player = AlphaBetaArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, None, None,
                                        None, None, None])
            tic_tac_toe.X_set = {0}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertEqual([4 for i in range(40)], result_list)

    def test_minimax_heuristic_against_human_strategy(self):
        result_list = []
        for i in range(50):
            first_ai_player = \
                MinimaxHeuristicArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, "O", None, None,
                                        None, "X"])
            tic_tac_toe.X_set = {0, 8}
            tic_tac_toe.O_set = {4}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertNotIn(2, result_list)
        self.assertNotIn(6, result_list)
        result_list = []
        for i in range(50):
            first_ai_player = \
                MinimaxHeuristicArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, None, None,
                                        None, None, None])
            tic_tac_toe.X_set = {0}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertNotIn(2, result_list)
        self.assertNotIn(6, result_list)

    def test_alphabeta_heuristic_against_human_strategy(self):
        result_list = []
        for i in range(50):
            first_ai_player = \
                AlphaBetaHeuristicArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, "O", None, None,
                                        None, "X"])
            tic_tac_toe.X_set = {0, 8}
            tic_tac_toe.O_set = {4}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertNotIn(2, result_list)
        self.assertNotIn(6, result_list)
        for i in range(50):
            first_ai_player = \
                AlphaBetaHeuristicArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, None, None,
                                        None, None, None])
            tic_tac_toe.X_set = {0}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertNotIn(2, result_list)
        self.assertNotIn(6, result_list)

# Byte-compiled / optimized / DLL files
__pycache__
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*,cover
.hypothesis/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# IPython Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# dotenv
.env

# virtualenv
venv/
ENV/

# Spyder project settings
.spyderproject

# Rope project settings
.ropeproject

import unittest
from tic_tac_toe_3x3 import TicTacToe3x3
from artificial_intelligence import MinimaxArtificialIntelligence
from artificial_intelligence import AlphaBetaArtificialIntelligence
from artificial_intelligence import MinimaxHeuristicArtificialIntelligence
from artificial_intelligence import AlphaBetaHeuristicArtificialIntelligence


class TicTacToe3x3Tests(unittest.TestCase):

    def test_tic_tac_toe_creation(self):
        tic_tac_toe = TicTacToe3x3()
        self.assertEqual(tic_tac_toe.square, [None for i in range(9)])

    def test_tic_tac_toe_available_moves(self):
        tic_tac_toe = TicTacToe3x3()
        self.assertEqual(tic_tac_toe.available_moves(), [i for i in range(9)])

    def test_tic_tac_toe_available_moves_in_game(self):
        tic_tac_toe = TicTacToe3x3(["X", None, None, None, None,
                                    "O", None, None, None])
        self.assertEqual(tic_tac_toe.available_moves(), [1, 2, 3, 4, 6, 7, 8])

    def test_tic_tac_toe_make_move(self):
        tic_tac_toe = TicTacToe3x3()
        self.assertEqual(tic_tac_toe.make_move(0, "X"), True)
        self.assertEqual(tic_tac_toe.square, ["X", None, None, None, None,
                                              None, None, None, None])

    def test_tic_tac_toe_make_move_in_game(self):
        tic_tac_toe = TicTacToe3x3(["X", None, None, None, None,
                                    "O", None, None, None])
        self.assertEqual(tic_tac_toe.make_move(1, "X"), True)
        self.assertEqual(tic_tac_toe.square, ["X", "X", None, None, None,
                                              "O", None, None, None])

    def test_tic_tac_toe_make_move_alredy_occupied(self):
        tic_tac_toe = TicTacToe3x3(["X", None, None, None, None,
                                    "O", None, None, None])
        self.assertEqual(tic_tac_toe.make_move(0, "O"), False)
        self.assertEqual(tic_tac_toe.square, ["X", None, None, None, None,
                                              "O", None, None, None])

    def test_tic_tac_toe_complete(self):
        tic_tac_toe = TicTacToe3x3(["X", "X", "X", "X", "X",
                                    "O", "X", "X", "X"])
        self.assertEqual(tic_tac_toe.complete(), True)

    def test_tic_tac_toe_not_complete(self):
        tic_tac_toe = TicTacToe3x3(["X", None, None, None, None,
                                    "O", None, None, None])
        self.assertEqual(tic_tac_toe.complete(), False)

    def test_tic_tac_toe_has_winner(self):
        tic_tac_toe = TicTacToe3x3(["X", "X", "X", "X", "X",
                                    "O", "X", "X", "X"])
        tic_tac_toe.X_set = {0, 1, 2, 3, 4, 6, 7, 8}
        tic_tac_toe.O_set = {5}
        self.assertEqual(tic_tac_toe.has_winner(), True)

    def test_tic_tac_toe_not_has_winner(self):
        tic_tac_toe = TicTacToe3x3()
        self.assertEqual(tic_tac_toe.has_winner(), False)

    def test_tic_tac_toe_find_winner(self):
        tic_tac_toe = TicTacToe3x3(["X", "X", "X", "X", "X",
                                    "O", "X", "X", "X"])
        tic_tac_toe.X_set = {0, 1, 2, 3, 4, 6, 7, 8}
        tic_tac_toe.O_set = {5}
        self.assertEqual(tic_tac_toe.find_winner(), "X win")

    def test_tic_tac_toe_find_winner_o_win(self):
        tic_tac_toe = TicTacToe3x3(["X", "O", "X", "O", "O",
                                    "O", "X", "O", "X"])
        tic_tac_toe.X_set = {0, 2, 6, 8}
        tic_tac_toe.O_set = {1, 3, 4, 5, 7}
        self.assertEqual(tic_tac_toe.find_winner(), "O win")

    def test_tic_tac_toe_find_winner_draw(self):
        tic_tac_toe = TicTacToe3x3(["X", "X", "O", "O", "O",
                                    "X", "X", "X", "O"])
        tic_tac_toe.X_set = {0, 1, 5, 6, 7}
        tic_tac_toe.O_set = {2, 3, 4, 8}
        self.assertEqual(tic_tac_toe.find_winner(), "Draw")

    def test_heuristic_beginning(self):
        tic_tac_toe = TicTacToe3x3()
        self.assertEqual(tic_tac_toe.heuristic('O'), 0)

    def test_tic_tac_toe_heuristic(self):
        tic_tac_toe = TicTacToe3x3(["X", "O", None, "O", None,
                                    None, "X", "O", "X"])
        tic_tac_toe.X_set = {0, 6, 8}
        tic_tac_toe.O_set = {1, 3, 7}
        self.assertEqual(tic_tac_toe.heuristic('O'), -1)


class ArtificialIntelligenceTicTacToe3x3Tests(unittest.TestCase):

    def test_minimax_artificial_intelligence_creation(self):
        minimax_artificial_intelligence = MinimaxArtificialIntelligence()
        self.assertEqual(minimax_artificial_intelligence.symbol, "O")

    def test_alphabeta_artificial_intelligence_creation(self):
        alphabeta_artificial_intelligence = AlphaBetaArtificialIntelligence()
        self.assertEqual(alphabeta_artificial_intelligence.symbol, "O")

    def test_minimax_heuristic_artificial_intelligence_creation(self):
        minimax_heuristic_artificial_intelligence = \
            MinimaxHeuristicArtificialIntelligence()
        self.assertEqual(minimax_heuristic_artificial_intelligence.symbol, "O")
        self.assertEqual(minimax_heuristic_artificial_intelligence.depth, 5)

    def test_alphabeta_heuristic_artificial_intelligence_creation(self):
        alphabeta_heuristic_artificial_intelligence = \
            AlphaBetaHeuristicArtificialIntelligence()
        self.assertEqual(alphabeta_heuristic_artificial_intelligence.symbol,
                         "O")
        self.assertEqual(alphabeta_heuristic_artificial_intelligence.depth, 5)

    def test_minimax_against_minimax(self):
        result_list = []
        for i in range(5):
            first_ai_player = MinimaxArtificialIntelligence()
            second_ai_player = MinimaxArtificialIntelligence(symbol="X")
            tic_tac_toe = TicTacToe3x3()

            while not tic_tac_toe.complete():
                # AI one
                first_ai_move = first_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(first_ai_move,
                                      first_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break

                # AI two
                second_ai_move = second_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(second_ai_move,
                                      second_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break
            result_list.append(tic_tac_toe.find_winner())
        self.assertEqual(result_list, ["Draw" for i in range(5)])

    def test_alphabeta_against_alphabeta(self):
        result_list = []
        for i in range(5):
            first_ai_player = AlphaBetaArtificialIntelligence()
            second_ai_player = AlphaBetaArtificialIntelligence(symbol="X")
            tic_tac_toe = TicTacToe3x3()

            while not tic_tac_toe.complete():
                # AI one
                first_ai_move = first_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(first_ai_move,
                                      first_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break

                # AI two
                second_ai_move = second_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(second_ai_move,
                                      second_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break
            result_list.append(tic_tac_toe.find_winner())
        self.assertEqual(result_list, ["Draw" for i in range(5)])

    def test_minimax_heuristic_against_alphabeta(self):
        result_list = []
        for i in range(5):
            first_ai_player = MinimaxArtificialIntelligence()
            second_ai_player = AlphaBetaArtificialIntelligence(symbol="X")
            tic_tac_toe = TicTacToe3x3()

            while not tic_tac_toe.complete():
                # AI one
                first_ai_move = first_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(first_ai_move,
                                      first_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break

                # AI two
                second_ai_move = second_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(second_ai_move,
                                      second_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break
            result_list.append(tic_tac_toe.find_winner())
        self.assertEqual(result_list, ["Draw" for i in range(5)])

    def test_alphabeta_heuristic_against_alphabeta(self):
        result_list = []
        for i in range(5):
            first_ai_player = \
                AlphaBetaHeuristicArtificialIntelligence(symbol="O")
            second_ai_player = AlphaBetaArtificialIntelligence(symbol="X")
            tic_tac_toe = TicTacToe3x3()

            while not tic_tac_toe.complete():
                # AI one
                first_ai_move = first_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(first_ai_move,
                                      first_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break

                # AI two
                second_ai_move = second_ai_player.choose_move(
                                                        tic_tac_toe)
                tic_tac_toe.make_move(second_ai_move,
                                      second_ai_player.symbol)
                if tic_tac_toe.complete() or tic_tac_toe.has_winner():
                    break
            result_list.append(tic_tac_toe.find_winner())
        self.assertEqual(result_list, ["Draw" for i in range(5)])

    def test_minimax_against_human_strategy(self):
        result_list = []
        for i in range(30):
            first_ai_player = MinimaxArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, "O", None, None,
                                        None, "X"])
            tic_tac_toe.X_set = {0, 8}
            tic_tac_toe.O_set = {4}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertNotIn(2, result_list)
        self.assertNotIn(6, result_list)
        result_list = []
        for i in range(30):
            first_ai_player = MinimaxArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, None, None,
                                        None, None, None])
            tic_tac_toe.X_set = {0}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertEqual([4 for i in range(30)], result_list)

    def test_alphabeta_against_human_strategy(self):
        result_list = []
        for i in range(40):
            first_ai_player = AlphaBetaArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, "O", None, None,
                                        None, "X"])
            tic_tac_toe.X_set = {0, 8}
            tic_tac_toe.O_set = {4}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertNotIn(2, result_list)
        self.assertNotIn(6, result_list)
        result_list = []
        for i in range(40):
            first_ai_player = AlphaBetaArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, None, None,
                                        None, None, None])
            tic_tac_toe.X_set = {0}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertEqual([4 for i in range(40)], result_list)

    def test_minimax_heuristic_against_human_strategy(self):
        result_list = []
        for i in range(50):
            first_ai_player = \
                MinimaxHeuristicArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, "O", None, None,
                                        None, "X"])
            tic_tac_toe.X_set = {0, 8}
            tic_tac_toe.O_set = {4}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertNotIn(2, result_list)
        self.assertNotIn(6, result_list)
        result_list = []
        for i in range(50):
            first_ai_player = \
                MinimaxHeuristicArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, None, None,
                                        None, None, None])
            tic_tac_toe.X_set = {0}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertNotIn(2, result_list)
        self.assertNotIn(6, result_list)

    def test_alphabeta_heuristic_against_human_strategy(self):
        result_list = []
        for i in range(50):
            first_ai_player = \
                AlphaBetaHeuristicArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, "O", None, None,
                                        None, "X"])
            tic_tac_toe.X_set = {0, 8}
            tic_tac_toe.O_set = {4}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertNotIn(2, result_list)
        self.assertNotIn(6, result_list)
        for i in range(50):
            first_ai_player = \
                AlphaBetaHeuristicArtificialIntelligence(symbol="O")
            tic_tac_toe = TicTacToe3x3(["X", None, None, None, None, None,
                                        None, None, None])
            tic_tac_toe.X_set = {0}
            first_ai_move = first_ai_player.choose_move(tic_tac_toe)
            result_list.append(first_ai_move)
        self.assertNotIn(2, result_list)
        self.assertNotIn(6, result_list)
